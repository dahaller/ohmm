#!/usr/bin/env bash

# TODO
# separate arguments by || ad && possibly

# TODO
PID=$(pidof mplayer)
kill $PID >& /dev/null

# create fifo
FIFO=/var/tmp/.fifo
if [ ! -e $FIFO ]; then
	mkfifo $FIFO
fi

MY_STDOUT=/var/tmp/.ohmm_out
SLEEP=.2s

# create backend
MARGS="-slave -idle -quiet -input file=$FIFO"
mplayer $MARGS > $MY_STDOUT 2>&1 &
VOLUME=50
PWD=$(pwd)
V_INC=10

# set initial volume
echo "set volume $VOLUME" > $FIFO

# TODO
# yet another wrapper for sending mplayer what to play
function ohmm_play {
	if [ "$1" = "" ]; then
		echo dir
	else
		if [ -e "$1" ]; then
			echo "loadfile $PWD/$1 $2" > $FIFO
		else
			echo "$1 does not exist"
		fi
	fi
}

# execute the shell command with the line tokenized into array
function shell_cmd {
	LINE_CMD=""
	for s in ${CMD[@]}; do
		LINE_CMD="$LINE_CMD $s"
	done
	$LINE_CMD
}

# driver loop
while true; do
CMD=""
# 	prompt
	echo -n "ohmm|$PWD "

# 	get user command and tokenize into array
	read -a CMD 
	
	if [ -z ${CMD[0]} ]; then
		continue
	fi

#	check if I recognize it
	if [ "${CMD[0]}" = "play" ]; then
		ohmm_play ${CMD[1]} 0

	elif [ "${CMD[0]}" = "add" ]; then
		ohmm_play ${CMD[1]} 1
	
	elif [ "${CMD[0]}" = "pause" ]; then
		echo "pause" > $FIFO

	elif [ "${CMD[0]}" = "next" ] || [ "${CMD[0]}" = "n" ]; then
		echo "pt_step 1" > $FIFO

	elif [ "${CMD[0]}" = "back" ] || [ "${CMD[0]}" = "b" ]; then
		echo "pt_step -1" > $FIFO

	elif [ "${CMD[0]}" = "up" ] || [ "${CMD[0]}" = "u" ]; then
#		bound the upper limit of the volume value
		if [ $VOLUME -lt 100 ]; then
			VOLUME=$(($VOLUME+$V_INC))
		fi
		echo "set volume $VOLUME 0" > $FIFO

	elif [ "${CMD[0]}" = "down" ] || [ "${CMD[0]}" = "d" ]; then
#		bound the lower limit of the volume value
		if [ $VOLUME -gt 0 ]; then
			VOLUME=$(($VOLUME-$V_INC))
		fi
		echo "set volume $VOLUME 0" > $FIFO

#	TODO make it prettier and be able to edit info and search
	elif [ "${CMD[0]}" = "info" ]; then
		echo "get_file_name" > $FIFO
		echo "get_meta_track" > $FIFO
		echo "get_meta_artist" > $FIFO
		echo "get_meta_album" > $FIFO
		sleep $SLEEP 
		tail $MY_STDOUT | grep "ANS_"

	elif [ "${CMD[0]}" = "stop" ]; then
		echo "stop" > $FIFO
	
	elif [ "${CMD[0]}" = "quit" ]; then
		echo "quit" > $FIFO
		rm $FIFO
		rm $MY_STDOUT
		clear
		echo -n $PS1
		break

	else
		shell_cmd $CMD
	fi
done
