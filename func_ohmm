#!/usr/bin/env bash

VARS="$EXE_PATH/var_ohmm"
source $VARS
# ===============================================================

function ohmm_add {
	if [ -z "${CMD[1]}" ]; then
		ohmm_underscore "d"
		OIFS=$IFS
		IFS=$'\n'
		for f in `find . \( ! -iname ".*" \) -iregex $FORMATS`; do
			if [ -e $QUEUE ] && [ -f $f ]; then	
#				spaces suck, I am going to fix them for you
				mv -n "$f" $(echo "$f" | tr ' ' '_') &>/dev/null ||
				echo "$(echo "$f" | tr ' ' '_')" >> $QUEUE ||
				echo "loadfile $(echo "$f" | tr ' ' '_') 1" > $FIFO
			else
				ohmm_play
				break
			fi
		done
		IFS=$OIFS
	fi

	if [ ! -e $QUEUE ]; then 
		ohmm_play
		return
	fi	
#	a directory
	if [ -d "${CMD[1]}" ]; then
		ODIR=$PWD
		cd "${CMD[1]}"
		
		CMD[1]=""
		ohmm_add

		cd $ODIR
#	file
	elif [ -f "${CMD[1]}" ]; then
#		append to playlist file
		if [ -e $QUEUE ]; then
			echo "$PWD/${CMD[1]}" >> $QUEUE
#			append playlist
			echo "loadfile $PWD/${CMD[1]} 1" > $FIFO
		else
#			need to create the playlist
			echo "$PWD/${CMD[1]}" > $QUEUE
			echo "loadlist $QUEUE 1" > $FIFO
		fi
#	does not exist
	else
		echo "${CMD[1]} does not exist"
	fi
#	ensure volume is set
	echo "set volume $VOLUME 0" > $FIFO
	return
}

function ohmm_back {
	ITER=${CMD[1]}
	if [ -z $ITER ]; then
		echo "pt_step -1" > $FIFO
	elif [ $ITER -gt 1 ]; then
		echo "pt_step -$ITER" > $FIFO
	else
		echo "Bad argument $ITER"
	fi
	return
}

# TODO - fix rsync 
function ohmm_backup {
	UPDATE=.ohmm_backup_in_process.tar.gz
	tar -czvf $UPDATE "$LIBRARY"
	UPDATE=""
	return
}

# TODO trailing spaces
function ohmm_edit {
	META_DATA=./.ohmm_edit_info
	echo "OPTIONS are::
		Song Title:
		Artist:
		Album:
		Note:
		Track:
		Genre:
		Year:
		---------" > $META_DATA
	SONG="${CMD[1]}"
	if [ -z "$SONG" ]; then
		echo "you gave me an empty argument"
	else
		if [ -e $SONG ]; then
			GOOD=false
			id3tool $SONG >> $META_DATA && GOOD=true
			if [ $GOOD  ]; then
				$EDITOR $META_DATA
				SONG_TITLE=$(cat $META_DATA | grep "^Song Title" | sed -r 's/^Song Title:\s*([^\s]*)\s*/\1/g')
				ARTIST=$(cat $META_DATA | grep "^Artist:" | sed -r 's/^Artist:\s*([^\s]*)\s*/\1/g')
				ALBUM=$(cat $META_DATA | grep "^Album:" | sed -r 's/^Album:\s*([^\s]*)\s*/\1/g')
				NOTE=$(cat $META_DATA | grep "^Note:" | sed -r 's/^Note:\s*([^\s]*)\s*/\1/g')
				TRACK=$(cat $META_DATA | grep "^Track:" | sed -r 's/^Track:\s*([^\s]*)\s*/\1/g')
				GENRE=$(cat $META_DATA | grep "^Genre:" | sed -r 's/^Genre:\s*([^\s]*)\s*/\1/g')
				YEAR=$(cat $META_DATA | grep "^Year:" | sed -r 's/^Year:\s*([^\s]*)\s*/\1/g')
				id3tool "$SONG" -t "$SONG_TITLE" -a "$ALBUM" -r "$ARTIST" -y "$YEAR" -n "$NOTE" -g "$GENRE" -c "$TRACK"
			else
				echo "id3tool could understand $SONG"
			fi
		else
			echo "$SONG does not exist"
		fi
	fi
	rm $META_DATA
	return
}

function ohmm_extract {
	DIR="${CMD[2]}"
	ODIR=$PWD

#	check for empty argument - I will use current directory if needed
	if [ ! -z "$DIR" ]; then
		cd $DIR
	fi
	for f in `find . \( ! -iname ".*" \) -type f -iregex $FORMATS`; do
		if [ "${CMD[1]}" = "soft" ]; then
			ln -s $f "$LIBRARY/$(basename $f)"
		elif [ "${CMD[1]}" = "hard" ]; then
			if [ -h "$LIBRARY/$(basename $f)" ]; then
				rm "$LIBRARY/$(basename $f)"
			fi
			mv -n $f "$LIBRARY/$(basename $f)"
		else
			echo "Bad argument ${CMD[1]}"
			break
		fi
	done
	cd $ODIR	
	return
}

# TODO get number in playlist
function ohmm_get_info {
	echo "get_file_name" > $FIFO
	echo "get_meta_title" > $FIFO
	echo "get_meta_track" > $FIFO
	echo "get_meta_artist" > $FIFO
	echo "get_meta_album" > $FIFO
	echo "get_percent_pos" > $FIFO
	echo "get_time_pos" > $FIFO
	echo "get_time_length" > $FIFO
	sleep $SLEEP 
	tail $MY_STDOUT -n 8 | grep "ANS_" | 
		sed -r 's/ANS_PERCENT_POSITION=([0-9][0-9]*)/\1% done/g' |
		sed -r 's/ANS_TIME_POSITION=([0-9][0-9]*.[0-9][0-9]*)/\1s elapsed/g' |
		sed -r 's/ANS_LENGTH=(.*)/Total length: \1s/g' |
		sed -r 's/.*FILENAME=(.*)/File: \1/g' | 
		sed -r 's/.*TITLE=(.*)/Name: \1/g' |
		sed -r 's/.*TRACK=(.*)/Track: \1/g' |
		sed -r 's/.*ARTIST=(.*)/Artist: \1/g' |
		sed -r 's/.*ALBUM=(.*)/Album: \1/g' |
		sed -r 's/PROPERTY_UNAVAILABLE/nothing is playing/g'
	return
}

# TODO - in playlist get position
function ohmm_get_position {
	echo "not implemented"
}

# TODO goto string argument - first instance
function ohmm_goto {
	if [ -z "${CMD[1]}" ]; then
		echo "Give me a file to goto"
	else
		SEARCH=$(cat $QUEUE | grep ${CMD[1]})
		if [ -z "$SEARCH" ]; then
			echo "I cannot find ${CMD[1]} in the current queue"
		else
			echo $SEARCH
		fi
	fi
	return
}

function ohmm_list {
	if [ -e $QUEUE ]; then
		cat $QUEUE |
			sed -r 's/.*\.\/(.*)/\1/g' 	| 
			less -N
	else
		echo "Nothing to show"
	fi
	return
}

# TODO deal with mtp library
function ohmm_mtp {
	echo "not implemented"
	return
}

function ohmm_next {
	ITER=${CMD[1]}
	if [ -z "$ITER" ]; then
		echo "pt_step 1" > $FIFO
	elif [ $ITER -gt 1 ]; then
		echo "pt_step $ITER" > $FIFO
	else
		echo "Bad argument $ITER"
	fi
	return
}

function ohmm_play {
#	get rid of old stuff
	if [ -e $QUEUE ]; then
		rm $QUEUE
	fi
	if [ -z "${CMD[1]}" ]; then
		ohmm_underscore "d"	
		OIFS=$IFS
		IFS=$'\n'
#		should filter just music extensions I think are applicable
		for f in `find $PWD \( ! -iname ".*" \) -iregex $FORMATS -type f`; do
#			I have not decided what I want to do here
			if [ -d "$f" ]; then
				continue
			else
#				spaces suck, I am going to fix them for you
				mv -n "$f" $(echo "$f" | tr ' ' '_') ||
				echo "$(echo "$f" | tr ' ' '_')" >> $QUEUE 
			fi
		done
		IFS=$OIFS
	elif [ -d "${CMD[1]}" ]; then
		ODIR=$PWD
		cd ${CMD[1]}
		
		CMD[1]=""
		ohmm_play

		cd $ODIR	
	else
		if [ -e "${CMD[1]}" ]; then
			if [ -d "${CMD[1]}" ]; then
				ODIR=$PWD
				cd "$1"
				ohmm_play "" ""
				cd $ODIR
			else
				echo "$PWD/${CMD[1]}" >> $QUEUE
			fi
		else
			echo "${CMD[1]} does not exist"
		fi
	fi
	echo "loadlist $QUEUE 0" > $FIFO
	echo "set volume $VOLUME 0" > $FIFO
	return
}

function ohmm_quit {
	echo "quit" > $FIFO
	if [ -e $QUEUE ]; then
		rm $QUEUE
	fi
	rm $FIFO
	if [ -e $STDOUT ]; then
		rm $MY_STDOUT
	fi
	echo -n $PS1
	return
}

# TODO fix
function ohmm_repeat {
	if [ "${CMD[1]}" = "none" ]; then
		LOOP=-1
	elif [ "${CMD[1]}" = "all" ]; then
		LOOP=0
	elif [ "${CMD[1]}" = "num" ]; then
		LOOP=${CMD[2]}
	fi

	echo "set loop $LOOP" > $FIFO
	return
}

# TODO
function ohmm_search {
	echo "not implemented"
	return
}

function ohmm_shell_cmd {
	LINE_CMD=""
	for s in ${CMD[@]}; do
		LINE_CMD="$LINE_CMD $s"
	done
	eval $LINE_CMD
	return
}

# TODO fix
function ohmm_shuffle {
	if [ "${CMD[1]}" = "on" ]; then
		IS_SHUFFLE=true
	elif [ "${CMD[1]}" = "off" ]; then
		IS_SHUFFLE=false
	else
		echo "bad argument: ${CMD[1]}"
	fi
	return
}

function ohmm_shuffle_toggle {
	if [ $IS_SHUFFLE ]; then
		IS_SHUFFLE=false
	else
		IS_SHUFFLE=true
	fi
	return
}

function ohmm_volume {
	if [ $1 -gt 0 ]; then
#		bound the upper limit of the volume value
		if [ $VOLUME -lt 100 ]; then
			VOLUME=$(($VOLUME+$V_INC))
		fi
		echo "set volume $VOLUME 0" > $FIFO
		echo "VOLUME = $VOLUME%"

	else
#		bound the lower limit of the volume value
		if [ $VOLUME -gt 0 ]; then
			VOLUME=$(($VOLUME-$V_INC))
		fi
		echo "set volume $VOLUME 0" > $FIFO
		echo "VOLUME = $VOLUME%"

	fi
	return
}

function ohmm_underscore {
	HERP=$IFS
	IFS=$'\n'
	for f in $(find . -type $1); do
		mv $f $(echo $f | tr ' ' '_') &> /dev/null
	done
	IFS=$HERP
}
